#
# This is the master workflow for the password rotation medium article
# The workflow has the following inputs:
# {
#    "ip": "3.26.24.101",
#    "user": "wwonigkeit",
#    "vault": "hashicorp",
#    "endpoint": "linux"
# }
#
description: The master workflow to rotate passwords for specific device or application endpoints

states:
#
# First state definition, generate an event for the correct Vault application to be used
# Definitions so far:
#   - HashiCorp Vault (hashicorp)
#   - CyberArk (cyberark)
#   - AWS Secrets Manager (awssm)
#   - GCP Key Management Service (gcpkms)
#   - Azure Key Vault (azurekv)
#   - ManageEngine Password Manager (manageengine)
#
# Next state will generate a lookup event to the specific vault workflow. The context is 
# based on the selection in the previous state
#
- id: validate-input
  type: validate
  schema:
    title: Change Password Inputs
    type: object
    required:
    - ip
    properties:
      ip:
        type: string
        title: IP address
        default: "3.26.24.101"
      user:
        type: string
        title: Username
        default: "wwonigkeit"
      vault:
        type: string
        title: Vault Store
        default: "hashicorp"
      endpoint:
        type: string
        title: Endpoint Type
        default: "linux"
  transition: event-lookup

#
# This initial state will send an event which contains the input to the workflow. The event will be processed
# by the appropriate lookup workflow (which is contained in the directory under the specific vault software)
# example:
#       -> vaults\hashicorp\hashicorp-lookup
#
- id: event-lookup
  type: generateEvent
  log: 'Generating the lookup to the Vault jq(.vault)'
  event:
    type: com.direktiv.vault.lookup.request
    source: rotate-passwords
    data: jq(.)
    context:
      vault: jq(.vault)
      ip: jq(.ip)
  transition: wait-for-lookup

#
# This state now waits for the return event from any of the subflows calling the vaults
# to extract the old passwords from the vault
#
- id: wait-for-lookup
  type: eventXor
  timeout: PT30S
  events:
    - transition: event-generate
      event:
        type: com.direktiv.vault.lookup.complete
        context:
          vault: jq(.vault)
          ip: jq(.ip)
      transform: jq(. = ."com.direktiv.vault.lookup.complete".data)
    - transition: workflow-failure
      event:
        type: com.direktiv.vault.lookup.failure
        context:
          vault: jq(.vault)
          ip: jq(.ip)        

#
# This state will send an event which contains the input to a workflow which will generate the new password
# based on the type of vault being used and the specific IP address of the device.
# example:
#       -> vaults\hashicorp\hashicorp-generate
#
- id: event-generate
  type: generateEvent
  # log: jq(.)
  event:
    type: com.direktiv.vault.generate.request
    source: rotate-passwords
    data: jq(.)
    context:
      vault: jq(.vault)
      ip: jq(.ip)
  transition: wait-for-generate

#
# This state now waits for the return event from any of the subflows calling the vaults
# to generate a new passwords from the vault
#
- id: wait-for-generate
  type: eventXor
  timeout: PT30S
  events:
    - transition: event-change
      event:
        type: com.direktiv.vault.generate.complete
        context:
          vault: jq(.vault)
          ip: jq(.ip)
      transform: jq(. = ."com.direktiv.vault.generate.complete".data)
    - transition: workflow-failure
      event:
        type: com.direktiv.vault.generate.failure
        context:
          vault: jq(.vault)
          ip: jq(.ip)        

#
# This state will send an event which contains the input to a workflow which will chnage the password for the
# specified user on the device.
# example:
#       -> endpoints\linux\linux-change
#
- id: event-change
  type: generateEvent
  # log: jq(.)
  event:
    type: com.direktiv.endpoint.change.request
    source: rotate-passwords
    data: jq(.)
    context:
      vault: jq(.vault)
      ip: jq(.ip)
      endpoint: jq(.endpoint)
  transition: wait-for-change

#
# This state now waits for the return event from any of the subflows calling the endpoint
# to change the password on the endpoint
#
- id: wait-for-change
  type: eventXor
  timeout: PT30S
  events:
    - transition: event-verify
      event:
        type: com.direktiv.endpoint.change.complete
        context:
          vault: jq(.vault)
          ip: jq(.ip)        
      transform: jq(. = ."com.direktiv.endpoint.change.complete".data)
    - transition: workflow-failure
      event:
        type: com.direktiv.endpoint.change.failure
        context:
          vault: jq(.vault)
          ip: jq(.ip)        

#
# This state will send an event which contains the input to a workflow which will verify the password for the
# specified user on the device.
# example:
#       -> endpoints\linux\linux-verify
#
- id: event-verify
  type: generateEvent
  # log: jq(.)
  event:
    type: com.direktiv.endpoint.verify.request
    source: rotate-passwords
    data: jq(.)
    context:
      vault: jq(.vault)
      ip: jq(.ip)
      endpoint: jq(.endpoint)
  transition: wait-for-verify

#
# This state now waits for the return event from any of the subflows calling the endpoint workflow
# to verify the new password on the endpoint
#
- id: wait-for-verify
  type: eventXor
  timeout: PT30S
  events:
    - transition: event-update
      event:
        type: com.direktiv.endpoint.verify.complete
        context:
          vault: jq(.vault)
          ip: jq(.ip)        
      transform: jq(. = ."com.direktiv.endpoint.verify.complete".data)
    - transition: workflow-failure
      event:
        type: com.direktiv.endpoint.verify.failure
        context:
          vault: jq(.vault)
          ip: jq(.ip)        

#
# This state will send an event which contains the input to a workflow which will update the new password
# based on the type of vault being used and the specific IP address of the device.
# example:
#       -> vaults\hashicorp\hashicorp-update
#
- id: event-update
  type: generateEvent
  # log: jq(.)
  event:
    type: com.direktiv.vault.update.request
    source: rotate-passwords
    data: jq(.)
    context:
      vault: jq(.vault)
      ip: jq(.ip)
  transition: wait-for-update

#
# This state now waits for the return event from any of the subflows calling the vaults
# to update a new passwords to the vault
#
- id: wait-for-update
  type: eventXor
  timeout: PT30S
  events:
    - transition: workflow-complete
      event:
        type: com.direktiv.vault.update.complete
        context:
          vault: jq(.vault)
          ip: jq(.ip)        
      transform: jq(. = ."com.direktiv.vault.update.complete".data)
    - transition: workflow-failure
      event:
        type: com.direktiv.vault.update.failure
        context:
          vault: jq(.vault)
          ip: jq(.ip)        

#
# Handle the failure event from the update
#
- id: workflow-failure
  type: noop
  log: 'Failure occured jq(.)'

#
# Handle the success event from the password rotation process
#
- id: workflow-complete
  type: noop
  log: "Success! All of the password rotation components have completed within 30 seconds"
